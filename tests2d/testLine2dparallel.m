% this is a continuation of the test suite for the line2d class
function test_suite = testLine2dparallel
initTestSuite;

function lines = setup
% line0 = line2d([1 1],[3 1]);
% non-overlapping
lines{1} = line2d([-1 2],[-3 2],'segment');
lines{2} = line2d([-1 -1],[-3 -1],'segment');
lines{3} = line2d([5 2],[7 2],'segment');
lines{4} = line2d([5 -1],[7 -1],'segment');
% overlapping
lines{5} = line2d([2 2],[-3 2],'segment');
lines{6} = line2d([2 -1],[-3 -1],'segment');
lines{7} = line2d([2 2],[7 2],'segment');
lines{8} = line2d([2 -1],[7 -1],'segment');
    
function testDistLineParallel(lines)
line0 = line2d([1 1],[3 1]);
d = [line2d.distParallel(line0,lines{1}) ...
    line2d.distParallel(line0,lines{2}) ...
    line2d.distParallel(line0,lines{3}) ...
    line2d.distParallel(line0,lines{4})];
expected_d = [1 2 1 2];
assertElementsAlmostEqual(d,expected_d);
% overlapping
d = [line2d.distParallel(line0,lines{5}) ...
    line2d.distParallel(line0,lines{6}) ...
    line2d.distParallel(line0,lines{7}) ...
    line2d.distParallel(line0,lines{8})];
expected_d = [1 2 1 2];
assertElementsAlmostEqual(d,expected_d);

function testDistRayToSegmentParallel(lines)
line0 = line2d([1 1],[3 1],'ray');
d = [line2d.distParallel(line0,lines{1}) ...
    line2d.distParallel(line0,lines{2}) ...
    line2d.distParallel(line0,lines{3}) ...
    line2d.distParallel(line0,lines{4})];
expected_d = [norm([1 1]-[-1 2]) norm([1 1]-[-1 -1]) 1 2];
assertElementsAlmostEqual(d,expected_d);
% overlapping
d = [line2d.distParallel(line0,lines{5}) ...
    line2d.distParallel(line0,lines{6}) ...
    line2d.distParallel(line0,lines{7}) ...
    line2d.distParallel(line0,lines{8})];
expected_d = [1 2 1 2];
assertElementsAlmostEqual(d,expected_d);
% flip the ray
line0 = line0.flipDirection;
d = [line2d.distParallel(line0,lines{1}) ...
    line2d.distParallel(line0,lines{2}) ...
    line2d.distParallel(line0,lines{3}) ...
    line2d.distParallel(line0,lines{4})];
expected_d = [1 2 norm([3 1]-[5 2]) norm([3 1]-[5 -1])];
assertElementsAlmostEqual(d,expected_d);

function testDistSegmentToRayToParallel(lines)
line0 = line2d([1 1],[3 1],'ray');
d = [line2d.distParallel(lines{1},line0) ...
    line2d.distParallel(lines{2},line0) ...
    line2d.distParallel(lines{3},line0) ...
    line2d.distParallel(lines{4},line0)];
expected_d = [norm([1 1]-[-1 2]) norm([1 1]-[-1 -1]) 1 2];
assertElementsAlmostEqual(d,expected_d);
% overlapping
d = [line2d.distParallel(lines{5},line0) ...
    line2d.distParallel(lines{6},line0) ...
    line2d.distParallel(lines{7},line0) ...
    line2d.distParallel(lines{8},line0)];
expected_d = [1 2 1 2];
assertElementsAlmostEqual(d,expected_d);
% flip the ray
line0 = line0.flipDirection;
d = [line2d.distParallel(lines{1},line0) ...
    line2d.distParallel(lines{2},line0) ...
    line2d.distParallel(lines{3},line0) ...
    line2d.distParallel(lines{4},line0)];
expected_d = [1 2 norm([3 1]-[5 2]) norm([3 1]-[5 -1])];
assertElementsAlmostEqual(d,expected_d);

function testDistSegmentParallel(lines)
line0 = line2d([1 1],[3 1],'segment');
d = [line2d.distParallel(line0,lines{1}) ...
    line2d.distParallel(line0,lines{2}) ...
    line2d.distParallel(line0,lines{3}) ...
    line2d.distParallel(line0,lines{4})];
expected_d = [norm([1 1]-[-1 2]) norm([1 1]-[-1 -1]) norm([3 1]-[5 2]) norm([3 1]-[5 -1])];
assertElementsAlmostEqual(d,expected_d);
% flip the segments
d = [line2d.distParallel(line0,lines{1}.flipDirection) ...
    line2d.distParallel(line0,lines{2}.flipDirection) ...
    line2d.distParallel(line0,lines{3}.flipDirection) ...
    line2d.distParallel(line0,lines{4}.flipDirection)];
expected_d = [norm([1 1]-[-1 2]) norm([1 1]-[-1 -1]) norm([3 1]-[5 2]) norm([3 1]-[5 -1])];
assertElementsAlmostEqual(d,expected_d);
% overlapping
d = [line2d.distParallel(line0,lines{5}) ...
    line2d.distParallel(line0,lines{6}) ...
    line2d.distParallel(line0,lines{7}) ...
    line2d.distParallel(line0,lines{8})];
expected_d = [1 2 1 2];
assertElementsAlmostEqual(d,expected_d);
% flip the ray
line0 = line0.flipDirection;
d = [line2d.distParallel(line0,lines{1}) ...
    line2d.distParallel(line0,lines{2}) ...
    line2d.distParallel(line0,lines{3}) ...
    line2d.distParallel(line0,lines{4})];
expected_d = [norm([1 1]-[-1 2]) norm([1 1]-[-1 -1]) norm([3 1]-[5 2]) norm([3 1]-[5 -1])];
assertElementsAlmostEqual(d,expected_d);
% flip the segments
d = [line2d.distParallel(line0,lines{1}.flipDirection) ...
    line2d.distParallel(line0,lines{2}.flipDirection) ...
    line2d.distParallel(line0,lines{3}.flipDirection) ...
    line2d.distParallel(line0,lines{4}.flipDirection)];
expected_d = [norm([1 1]-[-1 2]) norm([1 1]-[-1 -1]) norm([3 1]-[5 2]) norm([3 1]-[5 -1])];
assertElementsAlmostEqual(d,expected_d);
% overlapping
d = [line2d.distParallel(line0,lines{5}) ...
    line2d.distParallel(line0,lines{6}) ...
    line2d.distParallel(line0,lines{7}) ...
    line2d.distParallel(line0,lines{8})];
expected_d = [1 2 1 2];
assertElementsAlmostEqual(d,expected_d);
